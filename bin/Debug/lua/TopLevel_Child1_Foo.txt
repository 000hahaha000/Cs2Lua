require "utility";
require "TopLevel_Child1_GenericClass_T";

TopLevel = {
	Child1 = {
		Foo = {

			cctor = function()
				TopLevel.Child1.Foo.__cctor();
			end,
			__cctor = function()
			end,


			__new_object = function(...)
				local args = ...;
				return (function() local obj = newobject(TopLevel.Child1.Foo, "ctor", args); return obj; end)();
			end,
			__define_class = function()
				local static = TopLevel.Child1.Foo;

				local static_props = {
				};

				local static_events = {
				};

				local instance = {
					ctor = function(self)
						self:__ctor();
						self:ctor__System_Int32(0);
						return self;
					end,
					ctor__System_Int32 = function(self, v)
						self:__ctor();
						self.m_Test = v;
						return self;
					end,
					GTest__TopLevel_Child1_GenericClass_Int32 = function(self, arg)
					end,
					GTest__TopLevel_Child1_GenericClass_Single = function(self, arg)
					end,
					Test__System_Int32__Ref_System_Int32__Out_System_Int32__Arr_System_Int32 = function(self, a, b, ...)
						local args = ...;
						local c = nil;
						local f = delegationwrap((function(p1) return p1; end));
						f(1);
						local f2 = delegationwrap((function(p1, p2)
							return p1 + p2;
						end));
						f2(1, 2);
						self.m_Test = a + b + 123;
						b = condexp(a < b, a, b);
						if a > 0 then
							c = a + b + args[1];
						end;
						local v = (function() local __compiler_condaccess_115 = args; if __compiler_condaccess_115 == nil then return nil; else return __compiler_condaccess_115.Length; end; end)();
						if a < b then
							c = b - a;
						elseif a >= b then
							c = a - b;
						end;
						if a < b then
							c = b - a;
						else
							c = a - b;
						end;
						if a < b then
							c = b - a;
						elseif a < c then
							c = a - b;
						else
							c = 0;
						end;
						return b, c;
					end,
					Test2 = function(self, a, b, c)
						local d = nil;
						c = c + a + b;
						d = c * 2;
						return c, c, d;
					end,
					Test__System_Int32 = function(self, v)
						local v1 = 0;
						local v2;
						local f = (function() local __compiler_newobject_145; __compiler_newobject_145, v1, v2 = newobject(TopLevel.Child1.GenericClass_T, "ctor", v1); return __compiler_newobject_145; end)();
						local v = f:__indexer_get(3, 4);
						f:__indexer_set(4, 5, 6);
						f:__indexer_set(4, 5, (function() local __compiler_invoke_148; __compiler_invoke_148v1, v2 = self:Test2(1, 2, v1) return __compiler_invoke_148; end)());
						v, v1, v2 = self:Test2(1, 2, v1);
						v1, v2 = self:Test2(1, 2, v1);
						v = 1 + (function() local __compiler_invoke_151; __compiler_invoke_151v1, v2 = self:Test2(1, 2, v1) return __compiler_invoke_151; end)();
						v = v + (function() local __compiler_assigninvoke_152; __compiler_assigninvoke_152, v1, v2 = self:Test2(1, 2, v1); return __compiler_assigninvoke_152; end)();
						v2 = ( (function() v, v1, v2 = self:Test2(1, 2, v1); return v; end)() );
						f:Test__System_Int32(v);
						delegationadd(self, "OnSimple", (function()
						end));
						do
							delegationadd(self, "OnSimple2", (function()
							end));
						end;
					end,

					__ctor = function(self)
					end,

					OnSimple = wrapdelegation{},
					OnSimple2 = wrapdelegation{},
					m_Test = 0,
					m_Test2 = 0,
				};

				local instance_props = {
				};

				local instance_events = {
				};

				return defineclass(static, static_props, static_events, instance, instance_props, instance_events);
			end,
		},
	},
};

return TopLevel.Child1.Foo.__define_class();