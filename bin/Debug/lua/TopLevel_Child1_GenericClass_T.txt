require "utility";

TopLevel = {
	Child1 = {
		GenericClass_T = {
			cctor = function()
				TopLevel.Child1.GenericClass_T.__cctor();
				TopLevel.Child1.GenericClass_T.s_Test = 9876;
			end,

			__cctor = function()
			end,

			OnAction0 = wrapdelegation({}),
			OnAction1 = wrapdelegation({}),
			s_Test = 8765,

			__new_object = function(...)
				local args = ...;
				return (function() local obj, v, v2 = newobject(TopLevel.Child1.GenericClass_T, "ctor", args); return obj; end)();
			end,
			__define_class = function()
				local static = TopLevel.Child1.GenericClass_T;

				local static_props = {
				};

				local static_events = {
				};

				local instance = {
					__indexer_get = function(self, v1, v2)
						return 123;
					end,
					__indexer_set = function(self, v1, v2, value)
					end,
					Test__TopLevel_Child1_T = function(self, v)
						LuaConsole.Print(typeis(v, "System.Int32"));
						local path = "";
						local fs = (function() local self; self = newexternobject(System.IO.StreamWriter, "ctor", path); return self; end)();
						LuaConsole.Print(fs:ToString());
						fs:Dispose();
						local s = "test";
						local obj = wrapdictionary{a = 123, b = 456};
						LuaConsole.Print(obj.a);
						local v = self:__indexer_get(1, 2);
						self:__indexer_set(2, 3, 456);
					end,
					Test__System_Int32__System_Single = function(self, vv, bb)
					end,
					ctor = function(self, v)
						local v2 = nil;
						self:__ctor();
						self.m_Test = v + 456;
						v = 123;
						v2 = 789;
						return self, v, v2;
					end,
					__ctor = function()
						self.m_Array = wraparray{1, 2, 3, 4};
						self.m_Test2 = self.m_Test + 1;
					end,

					PropErr = 456,
					OnAction2 = wrapdelegation({}),
					OnAction3 = wrapdelegation({}),
					m_Test = 123,
					m_Array = nil,
					m_Test2 = nil,
				};

				local instance_props = {
					Prop = {
						get = function(self)
							return 1;
						end,
						set = function(self, value)
							self.m_Test = value;
						end,
					},
				};

				local instance_events = {
					AAA = {
						add = function(self, value)
							delegationadd(TopLevel.Child1.GenericClass_T.OnAction0, value);
						end,
						remove = function(self, value)
							delegationremove(TopLevel.Child1.GenericClass_T.OnAction0, value);
						end,
					},
				};

				return defineclass(static, static_props, static_events, instance, instance_props, instance_events);
			end,
		},
	},
};

return TopLevel.Child1.GenericClass_T.__define_class();